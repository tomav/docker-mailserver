#! /bin/bash
# shellcheck disable=SC2094

# shellcheck source=../scripts/helper-functions.sh
. /usr/local/bin/helper-functions.sh

DATABASE=${DATABASE:-/tmp/docker-mailserver/postfix-accounts.cf}

function __usage
{
  printf "\e[35mADDMAILUSER\e[31m(\e[93m8\e[31m)

\e[38;5;214mNAME\e[39m
    addmailuser - add an email address (i.e. a user)

\e[38;5;214mSYNOPSIS\e[39m
    ./setup.sh email add [ OPTIONS ] <EMAIL ADDRESS> [<PASSWORD>]

\e[38;5;214mOPTIONS\e[39m
    -g
        Also generate user encryption key and password protect it with current password (requires mail_crypt plugin to be enabled)

    \e[94mGeneric Program Information\e[39m
        help       Print the usage information.

\e[38;5;214mEXAMPLES\e[39m
    \e[37m./setup.sh email add test@domain.tld\e[39m
        Add the email account test@domain.tld. You will be prompted
        to input a password afterwards since no password was supplied.

\e[38;5;214mEXIT STATUS\e[39m
    Exit status is 0 if command was successful. If wrong arguments are provided
    or arguments contain errors, the script will exit early with exit status 1.

"
}

[[ ${1:-} == 'help' ]] && { __usage ; exit 0 ; }

while getopts "g" OPT
do
  case ${OPT} in
    g )
      if pgrep -f "/usr/sbin/dovecot" &>/dev/null && grep "mail_plugins.*mail_crypt" /etc/dovecot/conf.d/* &>/dev/null # Ensure dovcot is running and also ensure mail_crypt is enabled, else doveadm will fail to find mailbox cryptokey commands
      then
        CRYPTOKEY_GENERATE=true
      else
        echo "Warning: Dovecot not running and/or no mail_crypt plugin found! Unable to generate user enryption key with password..."
      fi
      ;;
    * )
      echo "Invalid option: -${OPT}" >&2
      ;;
  esac
done
shift $(( OPTIND - 1 ))

FULL_EMAIL="${1}"
shift
PASSWD="${*}"
CRYPTOKEY_GENERATE="${CRYPTOKEY_GENERATE:-false}"

[[ -z ${FULL_EMAIL} ]] && { __usage ; errex 'No username specified' ; }
[[ "${FULL_EMAIL}" =~ .*\@.* ]] || { __usage ; errex 'Username must include the domain' ; }

# Protect config file with lock to avoid race conditions
touch "${DATABASE}"
create_lock "$(basename "$0")"
if grep -qi "^$(escape "${FULL_EMAIL}")|" "${DATABASE}"
then
  echo "User '${FULL_EMAIL}' already exists."
  exit 1
fi

if [[ -z ${PASSWD} ]]
then
  read -r -s -p "Enter Password: " PASSWD
  echo
  [[ -z ${PASSWD} ]] && errex "Password must not be empty"
fi

HASH="$(doveadm pw -s SHA512-CRYPT -u "${FULL_EMAIL}" -p "${PASSWD}")"
echo "${FULL_EMAIL}|${HASH}" >> "${DATABASE}"

USER="${FULL_EMAIL%@*}"
DOMAIN="${FULL_EMAIL#*@}"

# Tests fail if the creation of /var/mail/${DOMAIN}/${USER} doesn't happen fast enough after addmailuser executes (check-for-changes.sh race-condition)
if pgrep -f "check-for-changes.sh" &>/dev/null # Handle mailserver first boots that throw "Unless using LDAP, you need at least 1 email account to start Dovecot." and don't start check-for-changes.sh
then
  if [[ -e "/tmp/docker-mailserver-config-chksum" ]] # Prevent infinite loop in tests like "checking accounts: user3 should have been added to /tmp/docker-mailserver/postfix-accounts.cf even when that file does not exist"
  then
    while [[ ! -d "/var/mail/${DOMAIN}/${USER}" ]]
    do
      echo "Waiting for dovecot to create /var/mail/${DOMAIN}/${USER}..."
      sleep 1
    done
  fi
fi

# Only necessary when user encryption keys are enabled
if "${CRYPTOKEY_GENERATE}"
then
  while [[ $(stat -c '%U' "/var/mail/${DOMAIN}/${USER}") != docker ]]
  do
    echo "Waiting for proper owner to be set on /var/mail/${DOMAIN}/${USER}..."
    sleep 1
  done
  doveadm -o plugin/mail_crypt_private_password="$(echo -n "${PASSWD}" | sha256sum | awk '{print $1}')" mailbox cryptokey generate -u "${FULL_EMAIL}" -U
fi

echo "Successfully created ${FULL_EMAIL}"
